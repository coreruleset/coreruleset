# ------------------------------------------------------------------------
# OWASP ModSecurity Core Rule Set ver.3.3.0
# Copyright (c) 2006-2020 Trustwave and contributors. All rights reserved.
#
# The OWASP ModSecurity Core Rule Set is distributed under
# Apache Software License (ASL) version 2
# Please see the enclosed LICENSE file for full details.
# ------------------------------------------------------------------------


# The rules in this file transform ARGS parameters with a series of 
# transformations. See documentation in crs-setup.conf.
#
# Mechanics of a simple transformation rule
# -----------------------------------------
#
# Consider this rule:
#
# SecRule ARGS "!@streq %{ARGS}" \
#    "id:904100,\
#    phase:2,\
#    pass,\
#    t:base64DecodeExt,\
#    nolog,\
#    setvar:'tx.tf_1_base64DecodeExt_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"
#
# The rule transforms any given ARGS with the base64DecodeExt transformation.
# The SecRule condition will then examine the transformed parameter
# against the original, non-transformed parameter.
#
# If the two strings are not equal (and only then!), a new TX variable is
# created. The new variable will have the name 
# "tx.tf_1_base64DecodeExt_ARGS:<varname>".
#
# The prefix "tf_1_" indicates that it's a simply transformed parameter.
#
# Mechanics of a double transformation rule
# -----------------------------------------
#
# Consider this rule:

# SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
#    "id:904400,\
#    phase:2,\
#    pass,\
#    t:base64DecodeExt,\
#    nolog,\
#    setvar:'tx.tf_2_base64DecodeExt_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"
#
# The rule transforms any given simply transformed parameter (identified)
# via the prefix "tf_1_") with the base64DecodeExt transformation
# and the SecRule constraint will then examine the transformed parameter
# against the original, non-transformed argument.
#
# If the two strings are not equal (and only then!), a new TX variable is
# created. The new variable will have the name 
# "tx.tf_2_base64DecodeExt_TX:tf_1_<simple-transformation>_ARGS:<varname>".
#
# The name of the double transformation is thus a prefixed version of
# the simple transformation name.
#
# The prefix "tf_2_" indicates that it's a double transformed parameter.
#

SecRule TX:GENERIC_TRANSFORMATIONS "!@eq 1" "id:904010,phase:2,pass,nolog,skipAfter:END-REQUEST-904-GENERIC-TRANSFORMATIONS"


SecRule TX:EXECUTING_PARANOIA_LEVEL "@lt 1" "id:904011,phase:1,pass,nolog,skipAfter:END-REQUEST-904-GENERIC-TRANSFORMATIONS"
SecRule TX:EXECUTING_PARANOIA_LEVEL "@lt 1" "id:904012,phase:2,pass,nolog,skipAfter:END-REQUEST-904-GENERIC-TRANSFORMATIONS"
#
# -= Paranoia Level 1 (default) =- (apply only when tx.executing_paranoia_level is sufficiently high: 1 or higher)
#



SecRule TX:EXECUTING_PARANOIA_LEVEL "@lt 2" "id:904013,phase:1,pass,nolog,skipAfter:END-REQUEST-904-GENERIC-TRANSFORMATIONS"
SecRule TX:EXECUTING_PARANOIA_LEVEL "@lt 2" "id:904014,phase:2,pass,nolog,skipAfter:END-REQUEST-904-GENERIC-TRANSFORMATIONS"
#
# -= Paranoia Level 2 =- (apply only when tx.executing_paranoia_level is sufficiently high: 2 or higher)
#



SecRule TX:EXECUTING_PARANOIA_LEVEL "@lt 3" "id:904015,phase:1,pass,nolog,skipAfter:END-REQUEST-904-GENERIC-TRANSFORMATIONS"
SecRule TX:EXECUTING_PARANOIA_LEVEL "@lt 3" "id:904016,phase:2,pass,nolog,skipAfter:END-REQUEST-904-GENERIC-TRANSFORMATIONS"
#
# -= Paranoia Level 3 =- (apply only when tx.executing_paranoia_level is sufficiently high: 3 or higher)
#


# Transformation: base64DecodeExt
SecRule ARGS "!@streq %{ARGS}" \
    "id:904100,\
    phase:2,\
    pass,\
    t:base64DecodeExt,\
    nolog,\
    setvar:'tx.tf_1_base64DecodeExt_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: cmdLine
SecRule ARGS "!@streq %{ARGS}" \
    "id:904110,\
    phase:2,\
    pass,\
    t:cmdLine,\
    nolog,\
    setvar:'tx.tf_1_cmdLine_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: compressWhitespace
SecRule ARGS "!@streq %{ARGS}" \
    "id:904120,\
    phase:2,\
    pass,\
    t:compressWhitespace,\
    nolog,\
    setvar:'tx.tf_1_compressWhitespace_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: cssDecode
SecRule ARGS "!@streq %{ARGS}" \
    "id:904130,\
    phase:2,\
    pass,\
    t:cssDecode,\
    nolog,\
    setvar:'tx.tf_1_cssDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: escapeSeqDecode
SecRule ARGS "!@streq %{ARGS}" \
    "id:904140,\
    phase:2,\
    pass,\
    t:escapeSeqDecode,\
    nolog,\
    setvar:'tx.tf_1_escapeSeqDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: hexDecode
SecRule ARGS "!@streq %{ARGS}" \
    "id:904150,\
    phase:2,\
    pass,\
    t:hexDecode,\
    nolog,\
    setvar:'tx.tf_1_hexDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: htmlEntityDecode
SecRule ARGS "!@streq %{ARGS}" \
    "id:904160,\
    phase:2,\
    pass,\
    t:htmlEntityDecode,\
    nolog,\
    setvar:'tx.tf_1_htmlEntityDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: jsDecode
SecRule ARGS "!@streq %{ARGS}" \
    "id:904170,\
    phase:2,\
    pass,\
    t:jsDecode,\
    nolog,\
    setvar:'tx.tf_1_jsDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: normalizePath
SecRule ARGS "!@streq %{ARGS}" \
    "id:904180,\
    phase:2,\
    pass,\
    t:normalizePath,\
    nolog,\
    setvar:'tx.tf_1_normalizePath_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: normalizePathWin
SecRule ARGS "!@streq %{ARGS}" \
    "id:904190,\
    phase:2,\
    pass,\
    t:normalizePathWin,\
    nolog,\
    setvar:'tx.tf_1_normalizePathWin_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: removeComments
SecRule ARGS "!@streq %{ARGS}" \
    "id:904200,\
    phase:2,\
    pass,\
    t:removeComments,\
    nolog,\
    setvar:'tx.tf_1_removeComments_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: removeCommentsChar
SecRule ARGS "!@streq %{ARGS}" \
    "id:904210,\
    phase:2,\
    pass,\
    t:removeCommentsChar,\
    nolog,\
    setvar:'tx.tf_1_removeCommentsChar_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: removeNulls
SecRule ARGS "!@streq %{ARGS}" \
    "id:904220,\
    phase:2,\
    pass,\
    t:removeNulls,\
    nolog,\
    setvar:'tx.tf_1_removeNulls_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: removeWhitespace
SecRule ARGS "!@streq %{ARGS}" \
    "id:904230,\
    phase:2,\
    pass,\
    t:removeWhitespace,\
    nolog,\
    setvar:'tx.tf_1_removeWhitespace_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: replaceComments
SecRule ARGS "!@streq %{ARGS}" \
    "id:904240,\
    phase:2,\
    pass,\
    t:replaceComments,\
    nolog,\
    setvar:'tx.tf_1_replaceComments_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: replaceNulls
SecRule ARGS "!@streq %{ARGS}" \
    "id:904250,\
    phase:2,\
    pass,\
    t:replaceNulls,\
    nolog,\
    setvar:'tx.tf_1_replaceNulls_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: sqlHexDecode
SecRule ARGS "!@streq %{ARGS}" \
    "id:904260,\
    phase:2,\
    pass,\
    t:sqlHexDecode,\
    nolog,\
    setvar:'tx.tf_1_sqlHexDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: trim
SecRule ARGS "!@streq %{ARGS}" \
    "id:904270,\
    phase:2,\
    pass,\
    t:trim,\
    nolog,\
    setvar:'tx.tf_1_trim_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: urlDecode
SecRule ARGS "!@streq %{ARGS}" \
    "id:904280,\
    phase:2,\
    pass,\
    t:urlDecode,\
    nolog,\
    setvar:'tx.tf_1_urlDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: urlDecodeUni
SecRule ARGS "!@streq %{ARGS}" \
    "id:904290,\
    phase:2,\
    pass,\
    t:urlDecodeUni,\
    nolog,\
    setvar:'tx.tf_1_urlDecodeUni_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: utf8toUnicode
SecRule ARGS "!@streq %{ARGS}" \
    "id:904300,\
    phase:2,\
    pass,\
    t:utf8toUnicode,\
    nolog,\
    setvar:'tx.tf_1_utf8toUnicode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"


SecRule TX:EXECUTING_PARANOIA_LEVEL "@lt 4" "id:904017,phase:1,pass,nolog,skipAfter:END-REQUEST-904-GENERIC-TRANSFORMATIONS"
SecRule TX:EXECUTING_PARANOIA_LEVEL "@lt 4" "id:904018,phase:2,pass,nolog,skipAfter:END-REQUEST-904-GENERIC-TRANSFORMATIONS"
#
# -= Paranoia Level 4 =- (apply only when tx.executing_paranoia_level is sufficiently high: 4 or higher)
#

# Transformation: base64DecodeExt
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904400,\
    phase:2,\
    pass,\
    t:base64DecodeExt,\
    nolog,\
    setvar:'tx.tf_2_base64DecodeExt_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: cmdLine
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904410,\
    phase:2,\
    pass,\
    t:cmdLine,\
    nolog,\
    setvar:'tx.tf_2_cmdLine_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: compressWhitespace
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904420,\
    phase:2,\
    pass,\
    t:compressWhitespace,\
    nolog,\
    setvar:'tx.tf_2_compressWhitespace_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: cssDecode
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904430,\
    phase:2,\
    pass,\
    t:cssDecode,\
    nolog,\
    setvar:'tx.tf_2_cssDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: escapeSeqDecode
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904440,\
    phase:2,\
    pass,\
    t:escapeSeqDecode,\
    nolog,\
    setvar:'tx.tf_2_escapeSeqDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: hexDecode
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904450,\
    phase:2,\
    pass,\
    t:hexDecode,\
    nolog,\
    setvar:'tx.tf_2_hexDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: htmlEntityDecode
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904460,\
    phase:2,\
    pass,\
    t:htmlEntityDecode,\
    nolog,\
    setvar:'tx.tf_2_htmlEntityDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: jsDecode
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904470,\
    phase:2,\
    pass,\
    t:jsDecode,\
    nolog,\
    setvar:'tx.tf_2_jsDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: normalizePath
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904480,\
    phase:2,\
    pass,\
    t:normalizePath,\
    nolog,\
    setvar:'tx.tf_2_normalizePath_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: normalizePathWin
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904490,\
    phase:2,\
    pass,\
    t:normalizePathWin,\
    nolog,\
    setvar:'tx.tf_2_normalizePathWin_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: removeComments
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904500,\
    phase:2,\
    pass,\
    t:removeComments,\
    nolog,\
    setvar:'tx.tf_2_removeComments_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: removeCommentsChar
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904510,\
    phase:2,\
    pass,\
    t:removeCommentsChar,\
    nolog,\
    setvar:'tx.tf_2_removeCommentsChar_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: removeNulls
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904520,\
    phase:2,\
    pass,\
    t:removeNulls,\
    nolog,\
    setvar:'tx.tf_2_removeNulls_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: removeWhitespace
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904530,\
    phase:2,\
    pass,\
    t:removeWhitespace,\
    nolog,\
    setvar:'tx.tf_2_removeWhitespace_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: replaceComments
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904540,\
    phase:2,\
    pass,\
    t:replaceComments,\
    nolog,\
    setvar:'tx.tf_2_replaceComments_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: replaceNulls
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904550,\
    phase:2,\
    pass,\
    t:replaceNulls,\
    nolog,\
    setvar:'tx.tf_2_replaceNulls_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: sqlHexDecode
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904560,\
    phase:2,\
    pass,\
    t:sqlHexDecode,\
    nolog,\
    setvar:'tx.tf_2_sqlHexDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: trim
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904570,\
    phase:2,\
    pass,\
    t:trim,\
    nolog,\
    setvar:'tx.tf_2_trim_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: urlDecode
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904580,\
    phase:2,\
    pass,\
    t:urlDecode,\
    nolog,\
    setvar:'tx.tf_2_urlDecode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: urlDecodeUni
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904590,\
    phase:2,\
    pass,\
    t:urlDecodeUni,\
    nolog,\
    setvar:'tx.tf_2_urlDecodeUni_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"

# Transformation: utf8toUnicode
SecRule TX:/^tf_1_*/ "!@streq %{MATCHED_VAR_NAME}" \
    "id:904600,\
    phase:2,\
    pass,\
    t:utf8toUnicode,\
    nolog,\
    setvar:'tx.tf_2_utf8toUnicode_%{MATCHED_VAR_NAME}=%{MATCHED_VAR}'"


#
# -= Paranoia Levels Finished =-
#
SecMarker "END-REQUEST-904-GENERIC-TRANSFORMATIONS"

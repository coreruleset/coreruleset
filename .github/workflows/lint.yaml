name: Lint

on:
  push:
    branches:
      - main
      - v3.3/dev
      - v3.3/master
  pull_request:
    branches:
      - main
      - v3.3/dev
      - v3.3/master
  merge_group:

# Pin versions to not disrupt test pipelines
env:
  CRS_TOOLCHAIN_VERSION: '2.3.4'
  SECRULES_PARSING_VERSION: '0.2.11'
  CRS_LINTER_VERSION: '0.2.1'

jobs:
  check-syntax:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4.1.2
        with:
          # required for version detection using `git describe`
          fetch-depth: 50

      - name: Lint Yaml
        uses: ibiqlik/action-yamllint@2576378a8e339169678f9939646ee3ee325e845c # v3.1.1
        with:
          format: github
          file_or_dir: tests/regression/tests
          config_file: .yamllint.yml

      - name: Set up Python 3
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: 3.x


      - name: "Check CRS syntax"
        run: |
          pip install -U setuptools
          pip install secrules-parsing==${{ env.SECRULES_PARSING_VERSION }}
          secrules-parser -c --output-type github -f rules/*.conf

      - name: Fetch upstream tags for version detection in next step
        run: |
          git remote add upstream https://github.com/coreruleset/coreruleset
          git fetch --tags upstream
          git fetch upstream main
          if [ -n "${{ github.base_ref }}" ]; then
            echo "Fetching '${{ github.base_ref }}' from 'upstream'"
            git fetch upstream "${{ github.base_ref }}"
          else
            echo "Base ref is empty, skip fetching fro 'upstream'"
          fi

      - name: "Check CRS formatting"
        run: |
          pip install -U setuptools
          pip install crs-linter==${{ env.CRS_LINTER_VERSION }}
          crs-linter \
            --output=github \
            -r crs-setup.conf.example \
            -r 'rules/*.conf' \
            -t util/APPROVED_TAGS \
            -f util/FILENAME_EXCLUSIONS \
            -T 'tests/regression/tests/' \
            -E 'tests/TESTS_EXCLUSIONS' \
            -d "$(pwd)" \
            --head-ref "${{ github.head_ref }}" \
            --commit-message "${{ github.event.head_commit.message }}"

      - name: "Install crs-toolchain ${{ env.CRS_TOOLCHAIN_VERSION }}"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release download -R coreruleset/crs-toolchain "v${{ env.CRS_TOOLCHAIN_VERSION }}" \
            -p "crs-toolchain_${{ env.CRS_TOOLCHAIN_VERSION }}_linux_amd64.tar.gz" -O - | tar -xzvf - crs-toolchain

      - name: "Check that all assembly files are properly formatted"
        run: |
          ./crs-toolchain regex format -aco github

      - name: "Check that all rules are up to date"
        run: |
          ./crs-toolchain regex compare -ao github

      - name: "Check that all tests are properly numbered"
        run: |
          ./crs-toolchain util renumber-tests -cao github

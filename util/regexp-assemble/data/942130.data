##! This is a data file used to generate a regular expression for a CRS rule.
##! The generation of the regular expression happens with the help of
##! util/regexp-assemble/regexp-assemble.py.
##! The ID of the rule in question is part of the file name of this data file.
##! Read more about the format of this data file and the use of the assembly
##! script in util/regexp-assemble/README.md.
##!
##! Lines starting with `##!` are comments and will be skipped,
##! empty lines will be ignored completely.
##! In addition, the quote character `'` at the beginning of a line will
##! cause the line to be interpreted literally by the cmdline preprocessor only.
##!
##! Seven special comments are at your disposal to influence the assembly of the
##! expression:
##! - `##!+`: the flag comment
##! - `##!^`: the prefix comment
##! - `##!$`: the suffix comment
##! - `##!>`: the preprocessor comment
##! - `##!<`: the preprocessor end comment
##! - `##!=>`: the concatenation output comment
##! - `##!=<`: the concatenation input comment
##!
##! Currently supported preprocessors:
##! - assemble
##! - cmdline
##! - template
##! - include
##!
##! Please refer to util/regexp-assemble/README.md for a full explanation.

##!+ i

##! General comments:
##!
##! The idea behind this expressions is to capture simple logic based (un)equalities that
##! are used to quickly test SQL Logic that always returns TRUE (hence the term "SQL Tautology").

##! We also want to capture the left and right side, and compare for equality.
##! That's why you see below that some of the patterns include grouping explicitly

##! Prefix: captures the initial part that will be matched on the right hand side of the logical construct.

##!^ [\s'\"`()]*?\b([\d\w]+)\b[\s'\"`()]*?

##! These expressions try to match the logic using the operator,
##! so when the operator targets a TRUE operation, the initial match
##! should be present after the operator, logically meaning TRUE
##!
##! Examples:
##! '1' = '1'
##! 'f' like 'f'

##! This one will also match the "equal" part of '<=' and '>='
=[\s'\"`()]*?\b([\d\w]+)\b

##! <=> NULL-safe equal to operator in MySQL
<=>[\s'\"`()]*?\b([\d\w]+)\b

##! Like queries allow you to use wilcards: '%'

like[\s'\"`()]*?\b([\d\w]+)\b
sounds\s+like[\s'\"`()]*?\b([\d\w]+)\b

##! String based regexp. These don't use % as wildcard.
rlike[\s'\"`()]*?\b([\d\w]+)\b
regexp[\s'\"`()]*?\b([\d\w]+)\b
